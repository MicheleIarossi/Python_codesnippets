Add your own codesnippet
========================

Add a new feature module
------------------------

The ``examples.py`` script does nothing else than collect the available feature modules
inside the ``codesnippets`` package in a list and store this list in the ``codesnippets`` database.
This happens either the very first time that the script is run when no database is available or 
every time that the option ``u`` is entered.

You can add your own *codesnippet* by simply adding a new ``featureN.py`` module
inside the package ``codesnippets``, where ``N`` is a new number: for sake
of simplicity you can just copy an existing module and rename it with a new number.

Use the option ``r`` for renumbering the Python feature files should you wish to insert a new
feature between existing ones, i.e. if the ``featureN.py`` already exists. The option
``r`` renumbers the existing feature files from ``N`` to ``N+1``, so that a new
``featureN.py`` file can be added to the ``codesnippets``. It updates also automatically all
the cross references and the index file ``index.rst`` (see below).

Inside the module, you need to define a ``featureN()`` function whose
``docstring`` is parsed by ``examples.py`` and added
to the list with the number ``N`` provided.

As an example, consider the module ``feature1.py`` which corresponds to the feature
:doc:`dir() on an integer variable<feature1>`. The feature is defined by the function ``feature1()``
and its docstring describes its entry in the list of available features shown by
``examples.py``.

.. code-block:: Python  

    def feature1():
        """dir() on an integer variable"""
        print('``dir()`` on an integer variable')
        print('================================\n')
        print(':py:mod:`codesnippets.feature1`')
        print('-------------------------------\n')
        print('>>> a_value = 5\n')
        a_value = 5
        print('>>> dir(a_value)')
        print(dir(a_value))
        print('\n>>> a_value.bit_length()')
        print(a_value.bit_length())
        print(80*'-')
 
Document the feature
--------------------

For documenting your new feature, you need to install the 
`Sphinx Python Documentation Generator <https://www.sphinx-doc.org/en/master/index.html>`_.

The basic idea is to have your feature document itself by
printing example code along with explanations when run. Copy and paste this output
as the docstring of your module. The printed text should be formatted according to
`reStructuredText <https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html>`_,
the default plaintext markup language used by Sphinx.

As an example, consider again ``feature1.py`` above and notice how the module docstring
is actually the output text generated by the feature function itself::

    """
    ``dir()`` on an integer variable
    ================================

    :py:mod:`codesnippets.feature1`
    -------------------------------

    >>> a_value = 5

    >>> dir(a_value)
    ['__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__', '__delattr__', '__dir__',
    '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__',
    '__ge__', '__getattribute__', '__getnewargs__', '__gt__', '__hash__', '__index__', '__init__',
    '__init_subclass__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__',
    '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__',
    '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__',
    '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__',
    '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__',
    '__sub__', '__subclasshook__', '__truediv__', '__trunc__', '__xor__', 'as_integer_ratio',
    'bit_length', 'conjugate', 'denominator', 'from_bytes', 'imag', 'numerator', 'real', 'to_bytes']

    >>> a_value.bit_length()
    3
    """

Build the documentation
-----------------------

Once the new feature module is properly documented, you need to add a new ``featureN.rst``
file inside the  ``./sphinx/source`` folder, which is best done by simply copying an existing one
and renaming it. If you have used the option ``r`` for inserting a new feature between existing ones,
this step can be skipped, since this option takes care of keeping the ``rst`` files in sync.
Inside this file adapt then the feature module reference, in order
for the automodule plugin to parse the documentation from the module docstring::

    .. automodule:: codesnippets.featureN

where ``N`` is the new module number.

As a last step, open the file ``index.rst`` located in the same
``./sphinx/source`` folder and add an entry for your new feature module, so that it appears
in the table of contents.

Now build the documentation from a terminal window inside the folder ``./sphinx``::

    % make clean && make html

When you open the documentation in your browser ``./doc/html/index.html``, your new module should
appear as selectable in the table of content. 

